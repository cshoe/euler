from utils import divisor_counter, triangle_numbers


def problem12():
    """
    The sequence of triangle numbers is generated by adding the natural
    numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
     10: 1,2,5,10
     15: 1,3,5,15
     21: 1,3,7,21
     28: 1,2,4,7,14,28

     We can see that 28 is the first triangle number to have over five
     divisors.

    What is the value of the first triangle number to have over five hundred
    divisors?

    This is a brute force solution. You could cut out a lot of computation
    by starting the triangle generator at a higher number than, well, 1. If
    28 has just 5 divisors, a it's likely that a number with 500 divisors is
    going to be relatively large.

    But, in the interest of simplicity and assumption free code, we're going
    to brute force this.
    """
    divisors = 0
    tri_generator = triangle_numbers()
    while divisors < 500:
        tri_number = next(tri_generator)
        divisors = divisor_counter(tri_number)
        print tri_number, divisors

    return tri_number


if __name__ == '__main__':
    print problem12()
